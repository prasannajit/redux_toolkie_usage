import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { fetchToDo } from "./todoAPI";

interface ToDo {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
}
export interface ToDoState {
  list: Array<ToDo>;
  status: "idle" | "loading" | "failed";
}

const initialState: ToDoState = {
  list: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchToDoAsync = createAsyncThunk(
  "todo/fetchToDo",
  async (id?: number) => {
    try {
      const data = await fetchToDo(id);
      return data;
    } catch (e) {
      return {
        message: e.message,
      };
    }
  }
);

export const todoSlice = createSlice({
  name: "todo",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    add: (state, action: PayloadAction<ToDo>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.list.push(action.payload);
    },
    remove: (state, action: PayloadAction<number>) => {
      state.list = state.list.filter((todo) => todo.id !== action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchToDoAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchToDoAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.list = action.payload;
      });
  },
});

export const { add, remove } = todoSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectToDo = (state: RootState) => state.todo.list;

export default todoSlice.reducer;
